#include <sys/socket.h>
#include <sys/un.h>
#include <string>
#include <map>
#include <sstream>
#include <iostream>


#ifndef SSHLPRD_SOCKPATH
#define SSHLPRD_SOCKPATH "/tmp/sshlprd.sock"
#endif

using namespace std;
/*

main loop:
	receive request to map user to X server
	map user to X server

	*/

map<string, string> user_xserver;

int main() {

	// create the unix sockets
	int result;
	int sock = socket(PF_UNIX, SOCK_STREAM, 0);
	string message;

	if (sock == -1) {
		cerr << "Exception thrown creating socket" << endl;
		return 1;
	}

	struct sockaddr_un sock_addr;
	
	sock_addr.sun_family = AF_UNIX;
	strcpy( sock_addr.sun_path, SSHLPRD_SOCKPATH );

	result = bind(sock, (struct sockaddr*)&sock_addr, sizeof(struct sockaddr_un));
	if (result == -1) {
		cerr << "Unable to bind to pathname "
			<< SSHLPRD_SOCKPATH
			<< endl;
		return 1;
	}
	
	result = listen(sock, 10);
	if (result == -1) {
		cerr << "Unable to listen on socket "
			<< endl;
		return 1;
	}

	int fd;
	socklen_t addrlen;

	while ( -1 != (fd = accept(sock, (struct sockaddr*)&sock_addr, &addrlen)) ) {
		char buf[100];
		stringstream ss;
		size_t len_read, total_len_read = 0;
		
		while ( len_read = read(fd, buf, 100) ) {
			if (len_read <= 0)
				break;

			ss.write(buf, len_read);

			total_len_read += len_read;
			if (len_read < 100) {
				break;
			}
			if (total_len_read > 1000) { // force quit
				break;
			}

		}
		char c = 0;
		ss.write( &c, 1 );

		// split string into tokens of \0
		size_t len, offset = 0;
		const char *data = ss.str().c_str();

		while ( offset < total_len_read ) {
			string action = data + offset;
			offset += param.length() + 1;

			if (offset >= total_len_read)
				break;

			// let param be the user
			// value be the X server address
			
			if (action == "1") {
				string param = data + offset;
				offset += param.length() + 1;

				if (offset >= total_len_read)
					break;

				string value = data + offset;

				user_xserver[param] = value;

				cout << "Received input. User: "
					<< param
					<< " Display: "
					<< value
					<< endl;
			}
			else if (action == "2") {

			}

			offset += value.length() + 1;
		}
		close(fd);
	}
	close(sock);
}
